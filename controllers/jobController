const _ = require("lodash");
const Job = require("../models/job");

const createJob = async (req, res) => {
  try {
    const {
      role,
      desc,
      req: requirements,
      exp,
      salary,
      location,
      res: responsibilities,
      jobType,
      workMode,
      company,
      slug,
      applyLink,
      date,
    } = req.body;

    if (
      _.isNil(role) ||
      _.isNil(desc) ||
      _.isNil(company) ||
      _.isNil(slug) ||
      _.isNil(applyLink)
    ) {
      return res.send({
        success: false,
        status: 400,
        message: "Mandatory Fields are Missing",
        data: {},
      });
    }
    //add a check for valid slug (no spaces, alphabets and - are allowed), convert alphabets to lowercase
    //add a check for valid apply link (should be a valid url)
    const existingSlug = await Job.findOne({ slug });
    if (!_.isNil(existingSlug)) {
      return res.send({
        success: false,
        status: 400,
        message: "Slug Already Used",
        data: {},
      });
    }

    const newJob = await Job.create({
      role,
      description: desc,
      requirements,
      exp,
      salary,
      location,
      responsibilities,
      jobType,
      company,
      slug,
      applyLink,
      workMode,
      datePosted: date,
    });

    return res.send({
      success: true,
      status: 200,
      message: "Job Post Created Successfully",
      data: {
        postUrl: `http://localhost:30001/jobs/${newJob?.slug}`, // change it to dynamic url
      },
    });
  } catch (error) {
    console.log(error);
    return res.send({
      success: false,
      status: 500,
      message: "Error Creating Job Post",
      data: {},
    });
  }
};

const getJobBySlug = async (req, res) => {
  try {
    const { slug } = req.params;
    const job = await Job.findOne({ slug });

    if (_.isNil(job)) {
      return res.send({
        success: false,
        status: 404,
        message: "Job Post Not Found",
        data: {},
      });
    }

    return res.send({
      success: true,
      status: 200,
      message: "Job Fetched Successfully",
      data: {
        job: {
          role: job.role,
          desc: job.description,
          req: job.requirements,
          res: job.responsibilities,
          salary: job.salary,
          loc: job.location,
          empType: job.employmentType,
          company: job.company,
          link: job.applyLink,
          date: job.datePosted,
        },
      },
    });
  } catch (error) {
    console.log(error);
    return res.send({
      success: false,
      status: 500,
      message: "Error Fetching Job Post",
      data: {},
    });
  }
};

const isSlugAvailable = async (req, res) => {
  try {
    const { slug } = req.params;

    //add a check for valid slug (no spaces, alphabets and - are allowed), convert alphabets to lowercase

    const existingSlug = await Job.findOne({ slug });

    if (!_.isNil(existingSlug)) {
      return res.send({
        success: false,
        status: 400,
        message: `${slug} isn't available`,
        data: {},
      });
    }

    return res.send({
      success: true,
      status: 200,
      message: `${slug} is available`,
      data: {},
    });
  } catch (error) {
    console.log(error);
    return res.send({
      success: false,
      status: 500,
      message: "Error Checking Slug Availability",
      data: {},
    });
  }
};

const getAllJobs = async (req, res) => {
  try {
    const jobs = await Job.find({});

    return res.send({
      success: true,
      status: 200,
      message: "Jobs Fetched Successfully",
      data: {
        jobs: jobs.map((job) => ({
          role: _.get(job, "role"),
          salary: _.get(job, "salary"),
          location: _.get(job, "location"),
          jobType: _.get(job, "jobType"),
          company: _.get(job, "company"),
          date: _.get(job, "datePosted"),
          slug: _.get(job, "slug"),
        })),
      },
    });
  } catch (error) {
    console.log(error);
    return res.send({
      success: false,
      status: 500,
      message: "Error Fetching Jobs",
      data: {},
    });
  }
};

module.exports = {
  createJob,
  getJobBySlug,
  isSlugAvailable,
  getAllJobs,
};
